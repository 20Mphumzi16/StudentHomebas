{"ast":null,"code":"class PropertyService {\n  constructor() {\n    this.apiUrl = '/api/StudentHomeBas/Property'; // Base URL for the API, assuming you're using a proxy\n  }\n\n  // Helper method to handle fetch requests\n  async request(url, options) {\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.statusText}`);\n      }\n      return options.method === 'DELETE' ? response.text() : response.json();\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n\n  // Delete a Property by ID\n  async deleteProperty(propertyID) {\n    const url = `${this.apiUrl}/delete/${propertyID}`;\n    await this.request(url, {\n      method: 'DELETE'\n    });\n    return propertyID; // Return the book ID so the caller can update state\n  }\n\n  // Read a Property by ID\n  async readProperty(propertyID) {\n    const url = `${this.apiUrl}/read/${propertyID}`;\n    return await this.request(url, {\n      method: 'GET'\n    });\n  }\n\n  // Saves a new Property\n  async saveProperty(comicBook) {\n    const url = `${this.apiUrl}/create`;\n    return await this.request(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(comicBook)\n    });\n  }\n\n  // Update an existing Property\n  async updateProperty(comicBook) {\n    const url = `${this.apiUrl}/update`;\n    return await this.request(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(comicBook)\n    });\n  }\n\n  // Fetch all comic books\n  async fetchAllProperties() {\n    const url = `${this.apiUrl}/getAll`;\n    return await this.request(url, {\n      method: 'GET'\n    });\n  }\n}\n\n// Export an instance of the service class for reuse\nexport default new PropertyService();","map":{"version":3,"names":["PropertyService","constructor","apiUrl","request","url","options","response","fetch","ok","Error","statusText","method","text","json","error","console","deleteProperty","propertyID","readProperty","saveProperty","comicBook","headers","body","JSON","stringify","updateProperty","fetchAllProperties"],"sources":["C:/Users/ASUS/Documents/3rd-Year/ADP3/StudentHomebas/src/frontend/src/services/PropertyService.js"],"sourcesContent":["class PropertyService {\r\n    constructor() {\r\n        this.apiUrl = '/api/StudentHomeBas/Property'; // Base URL for the API, assuming you're using a proxy\r\n    }\r\n\r\n    // Helper method to handle fetch requests\r\n    async request(url, options) {\r\n        try {\r\n            const response = await fetch(url, options);\r\n            if (!response.ok) {\r\n                throw new Error(`Network response was not ok: ${response.statusText}`);\r\n            }\r\n            return options.method === 'DELETE' ? response.text() : response.json();\r\n        } catch (error) {\r\n            console.error('Fetch error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Delete a Property by ID\r\n    async deleteProperty(propertyID) {\r\n        const url = `${this.apiUrl}/delete/${propertyID}`;\r\n        await this.request(url, { method: 'DELETE' });\r\n        return propertyID; // Return the book ID so the caller can update state\r\n    }\r\n\r\n    // Read a Property by ID\r\n    async readProperty(propertyID) {\r\n        const url = `${this.apiUrl}/read/${propertyID}`;\r\n        return await this.request(url, { method: 'GET' });\r\n    }\r\n\r\n    // Saves a new Property\r\n    async saveProperty(comicBook) {\r\n        const url = `${this.apiUrl}/create`;\r\n        return await this.request(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(comicBook),\r\n        });\r\n    }\r\n\r\n    // Update an existing Property\r\n    async updateProperty(comicBook) {\r\n        const url = `${this.apiUrl}/update`;\r\n        return await this.request(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(comicBook),\r\n        });\r\n    }\r\n\r\n    // Fetch all comic books\r\n    async fetchAllProperties() {\r\n        const url = `${this.apiUrl}/getAll`;\r\n        return await this.request(url, { method: 'GET' });\r\n    }\r\n}\r\n\r\n// Export an instance of the service class for reuse\r\nexport default new PropertyService();\r\n"],"mappings":"AAAA,MAAMA,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAG,8BAA8B,CAAC,CAAC;EAClD;;EAEA;EACA,MAAMC,OAAOA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACxB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,OAAO,CAAC;MAC1C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,gCAAgCH,QAAQ,CAACI,UAAU,EAAE,CAAC;MAC1E;MACA,OAAOL,OAAO,CAACM,MAAM,KAAK,QAAQ,GAAGL,QAAQ,CAACM,IAAI,CAAC,CAAC,GAAGN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC1E,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACf;EACJ;;EAEA;EACA,MAAME,cAAcA,CAACC,UAAU,EAAE;IAC7B,MAAMb,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,WAAWe,UAAU,EAAE;IACjD,MAAM,IAAI,CAACd,OAAO,CAACC,GAAG,EAAE;MAAEO,MAAM,EAAE;IAAS,CAAC,CAAC;IAC7C,OAAOM,UAAU,CAAC,CAAC;EACvB;;EAEA;EACA,MAAMC,YAAYA,CAACD,UAAU,EAAE;IAC3B,MAAMb,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,SAASe,UAAU,EAAE;IAC/C,OAAO,MAAM,IAAI,CAACd,OAAO,CAACC,GAAG,EAAE;MAAEO,MAAM,EAAE;IAAM,CAAC,CAAC;EACrD;;EAEA;EACA,MAAMQ,YAAYA,CAACC,SAAS,EAAE;IAC1B,MAAMhB,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,SAAS;IACnC,OAAO,MAAM,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE;MAC3BO,MAAM,EAAE,MAAM;MACdU,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;IAClC,CAAC,CAAC;EACN;;EAEA;EACA,MAAMK,cAAcA,CAACL,SAAS,EAAE;IAC5B,MAAMhB,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,SAAS;IACnC,OAAO,MAAM,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE;MAC3BO,MAAM,EAAE,MAAM;MACdU,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;IAClC,CAAC,CAAC;EACN;;EAEA;EACA,MAAMM,kBAAkBA,CAAA,EAAG;IACvB,MAAMtB,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,SAAS;IACnC,OAAO,MAAM,IAAI,CAACC,OAAO,CAACC,GAAG,EAAE;MAAEO,MAAM,EAAE;IAAM,CAAC,CAAC;EACrD;AACJ;;AAEA;AACA,eAAe,IAAIX,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}